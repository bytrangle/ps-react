{"version":3,"sources":["components/EyeIcon/EyeIcon.js","components/PasswordInput/PasswordInput.js","components/TextInputCSSModules/textInput.module.css","../config/componentData.js","docs/examples/EyeIcon/Example.js","docs/examples/Label/ExampleOptional.js","docs/examples/Label/ExampleRequired.js","docs/examples sync /^/.//.*$","docs/Navigation.js","docs/CodeExample.js","docs/Example.js","docs/Props.js","docs/ComponentPage.js","docs/Docs.js","serviceWorker.js","index.js","docs/examples/PasswordInput/ExampleAllFeatures.js","docs/examples/ProgressBar/Example100Percent.js","docs/examples/ProgressBar/Example10Percent.js","docs/examples/ProgressBar/Example70Percent.js","docs/examples/TextInput/ExampleError.js","docs/examples/TextInput/ExampleOptional.js","components/HelloWorld/HelloWorld.js","docs/examples/HelloWorld/ExampleHelloWorld.js","components/RegistrationForm/RegistrationForm.js","docs/examples/RegistrationForm/ExampleRegistrationForm.js","components/TextInputBEM/TextInputBEM.js","docs/examples/TextInputBEM/ExampleError.js","components/TextInputCSSModules/TextInputCSSModules.js","docs/examples/TextInputCSSModules/ExampleError.js","components/TextInputStyledComponents/TextInputStyledComponents.js","docs/examples/TextInputStyledComponents/ExampleError.js","components/Label/Label.js","components/ProgressBar/ProgressBar.js","components/TextInput/TextInput.js"],"names":["EyeIcon","width","height","xmlns","viewBox","transform","fill","d","cx","cy","r","PasswordInput","props","toggleShowPassword","event","setState","prevState","showPassword","preventDefault","state","this","htmlId","value","label","error","onChange","placeholder","maxLength","showVisibilityToggle","quality","TextInput","type","required","href","onClick","show","marginLeft","length","ProgressBar","percent","Component","defaultProps","module","exports","EyeIconExample","ExampleOptional","htmlFor","ExampleRequired","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","Navigation","components","className","name","key","CodeExample","hljs","registerLanguage","javascript","highlightBlock","element","ref","children","React","Example","toggleCode","showCode","example","description","console","log","componentName","ExampleComponent","require","default","Props","defaultValue","ComponentPage","component","examples","Docs","route","window","location","hash","substr","addEventListener","componentData","filter","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","ExampleAllFeatures","password","target","minLength","getQuality","Example100Percent","Example10Percent","Example70Percent","ExampleError","HelloWorld","ExampleHelloWorld","RegistrationForm","user","onSubmit","validate","submitted","email","errors","minPasswordLength","parseInt","getOwnPropertyNames","confirmationMessage","passwordQuality","ExampleRegistrationForm","Label","TextInputBEM","styles","fieldset","inputError","TextInputCSSModules","styled","div","Input","input","Fieldset","style","display","color","getColor","getWidthAsPercentOfTotalWidth","border","backgroundColor","marginBottom"],"mappings":"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","file":"static/js/main.b1857c20.chunk.js","sourcesContent":["import React from 'react'\n\n/** SVG Eye Icon */\nfunction EyeIcon() {\n  // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\n  return (\n    <svg width=\"16\" height=\"16\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 22 22\">\n      <g transform=\"matrix(.02146 0 0 .02146 1 1)\" fill=\"#4d4d4d\">\n        <path d=\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\" />\n        <circle cx=\"466.08\" cy=\"466.02\" r=\"134.5\" />\n      </g>\n    </svg>\n  )\n}\n\nexport default EyeIcon","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport ProgressBar from '../ProgressBar'\nimport EyeIcon from '../EyeIcon'\nimport TextInput from '../TextInput'\n\n/** Password input with integrated label, quality tips, and show password toggle */\nclass PasswordInput extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      showPassword: false\n    }\n  }\n  toggleShowPassword = event => {\n    this.setState(prevState => {\n      return {showPassword: !prevState.showPassword}\n    })\n    if (event) event.preventDefault()\n  }\n  render() {\n    const {htmlId, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...props} = this.props\n    const {showPassword} = this.state\n    return (\n      <TextInput\n        htmlId={htmlId}\n        label={label}\n        placeholder={placeholder}\n        type={showPassword ? 'text' : 'password'}\n        onChange={onChange}\n        value={value}\n        maxLength={maxLength}\n        error={error}\n        required\n        {...props}>\n        {showVisibilityToggle &&\n        <a\n          href=\"#\"\n          onClick={this.toggleShowPassword}\n          show={{marginLeft: 5}}>\n          <EyeIcon/>\n        </a>\n        }\n        {value.length > 0 && quality && <ProgressBar percent={quality} width={130}/>}\n      </TextInput>\n    )\n  }\n}\n\nPasswordInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing */\n  htmlId: PropTypes.string.isRequired,\n /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\n name: PropTypes.string.isRequired,\n\n /** Password value */\n value: PropTypes.any,\n\n /** Input label */\n label: PropTypes.string,\n\n /** Function called when password input value changes */\n onChange: PropTypes.func.isRequired,\n\n /** Max password length accepted */\n maxLength: PropTypes.number,\n\n /** Placeholder displayed when no password is entered */\n placeholder: PropTypes.string,\n\n /** Set to true to show the toggle for displaying the currently entered password */\n showVisibilityToggle: PropTypes.bool,\n\n /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\n quality: PropTypes.number,\n\n /** Validation error to display */\n error: PropTypes.string\n}\n\nPasswordInput.defaultProps = {\n  maxLength: 50,\n  showVisibilityToggle: false,\n  label: 'Password'\n}\n\nexport default PasswordInput","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"textInput_error__r7LpN\",\"inputError\":\"textInput_inputError__2pecQ\",\"fieldset\":\"textInput_fieldset__12mau\"};","module.exports = [{\"name\":\"EyeIcon\",\"description\":\"SVG Eye Icon\",\"code\":\"import React from 'react'\\n\\n/** SVG Eye Icon */\\nfunction EyeIcon() {\\n  // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\\n  return (\\n    <svg width=\\\"16\\\" height=\\\"16\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 22 22\\\">\\n      <g transform=\\\"matrix(.02146 0 0 .02146 1 1)\\\" fill=\\\"#4d4d4d\\\">\\n        <path d=\\\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\\\" />\\n        <circle cx=\\\"466.08\\\" cy=\\\"466.02\\\" r=\\\"134.5\\\" />\\n      </g>\\n    </svg>\\n  )\\n}\\n\\nexport default EyeIcon\",\"examples\":[{\"name\":\"Example\",\"description\":\"\",\"code\":\"import React from 'react'\\nimport EyeIcon from 'ps-react/EyeIcon'\\n\\nexport default function EyeIconExample() {\\n  return <EyeIcon />\\n}\"}]},{\"name\":\"HelloWorld\",\"description\":\"A super lame component that says Hello with a custom message\",\"props\":{\"message\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Message to display\",\"defaultValue\":{\"value\":\"'World'\",\"computed\":false}}},\"code\":\"import React from 'react'\\nimport PropTypes from 'prop-types'\\n\\n/** A super lame component that says Hello with a custom message */\\nfunction HelloWorld({message}) {\\n  return <div>Hello {message}</div>\\n}\\n\\nHelloWorld.propTypes = {\\n  /** Message to display */\\n  message: PropTypes.string\\n}\\n\\nHelloWorld.defaultProps = {\\n  message: 'World'\\n}\\n\\nexport default HelloWorld\",\"examples\":[{\"name\":\"ExampleHelloWorld\",\"description\":\"Custom message\",\"code\":\"import React from 'react'\\nimport HelloWorld from 'ps-react/HelloWorld'\\n\\n/** Custom message */\\nexport default function ExampleHelloWorld() {\\n  return <HelloWorld message=\\\"Otto\\\" />\\n}\"}]},{\"name\":\"Label\",\"description\":\"Label with required field display, htmlFor, and block styling\",\"props\":{\"htmlFor\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"HTML ID for associated input\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Label text\"},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Display asterisk after label if true\"}},\"code\":\"import React from 'react'\\nimport PropTypes from 'prop-types'\\n\\n/** Label with required field display, htmlFor, and block styling */\\nfunction Label({htmlFor, label, required}) {\\n  return (\\n    <label style={{display: 'block'}} htmlFor={htmlFor}>\\n      {label} {required &&\\n        <span style={{color: 'red'}}>\\n          *\\n        </span>}\\n    </label>\\n  )\\n}\\n\\nLabel.propTypes = {\\n  /** HTML ID for associated input */\\n  htmlFor: PropTypes.string.isRequired,\\n  /** Label text */\\n  label: PropTypes.string.isRequired,\\n  /** Display asterisk after label if true */\\n  required: PropTypes.bool\\n}\\n\\nexport default Label\",\"examples\":[{\"name\":\"ExampleOptional\",\"description\":\"Optional label\",\"code\":\"import React from 'react'\\nimport Label from 'ps-react/Label'\\n\\n/** Optional label */\\nexport default function ExampleOptional() {\\n  return <Label htmlFor=\\\"test\\\" label=\\\"test\\\" />\\n}\"},{\"name\":\"ExampleRequired\",\"description\":\"Required label\",\"code\":\"import React from 'react'\\nimport Label from 'ps-react/Label'\\n\\n/** Required label */\\nexport default function ExampleRequired() {\\n  return <Label htmlFor=\\\"test\\\" label=\\\"test\\\" required />\\n}\"}]},{\"name\":\"PasswordInput\",\"description\":\"Password input with integrated label, quality tips, and show password toggle\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used by convention.\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Password value\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Input label\",\"defaultValue\":{\"value\":\"'Password'\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function called when password input value changes\"},\"maxLength\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Max password length accepted\",\"defaultValue\":{\"value\":\"50\",\"computed\":false}},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder displayed when no password is entered\"},\"showVisibilityToggle\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to true to show the toggle for displaying the currently entered password\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"quality\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Display password quality visually via ProgressBar, accepts a number between 0 and 100\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Validation error to display\"}},\"code\":\"import React, {Component} from 'react'\\nimport PropTypes from 'prop-types'\\nimport ProgressBar from '../ProgressBar'\\nimport EyeIcon from '../EyeIcon'\\nimport TextInput from '../TextInput'\\n\\n/** Password input with integrated label, quality tips, and show password toggle */\\nclass PasswordInput extends Component {\\n  constructor(props) {\\n    super(props)\\n    this.state = {\\n      showPassword: false\\n    }\\n  }\\n  toggleShowPassword = event => {\\n    this.setState(prevState => {\\n      return {showPassword: !prevState.showPassword}\\n    })\\n    if (event) event.preventDefault()\\n  }\\n  render() {\\n    const {htmlId, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...props} = this.props\\n    const {showPassword} = this.state\\n    return (\\n      <TextInput\\n        htmlId={htmlId}\\n        label={label}\\n        placeholder={placeholder}\\n        type={showPassword ? 'text' : 'password'}\\n        onChange={onChange}\\n        value={value}\\n        maxLength={maxLength}\\n        error={error}\\n        required\\n        {...props}>\\n        {showVisibilityToggle &&\\n        <a\\n          href=\\\"#\\\"\\n          onClick={this.toggleShowPassword}\\n          show={{marginLeft: 5}}>\\n          <EyeIcon/>\\n        </a>\\n        }\\n        {value.length > 0 && quality && <ProgressBar percent={quality} width={130}/>}\\n      </TextInput>\\n    )\\n  }\\n}\\n\\nPasswordInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing */\\n  htmlId: PropTypes.string.isRequired,\\n /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\\n name: PropTypes.string.isRequired,\\n\\n /** Password value */\\n value: PropTypes.any,\\n\\n /** Input label */\\n label: PropTypes.string,\\n\\n /** Function called when password input value changes */\\n onChange: PropTypes.func.isRequired,\\n\\n /** Max password length accepted */\\n maxLength: PropTypes.number,\\n\\n /** Placeholder displayed when no password is entered */\\n placeholder: PropTypes.string,\\n\\n /** Set to true to show the toggle for displaying the currently entered password */\\n showVisibilityToggle: PropTypes.bool,\\n\\n /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\\n quality: PropTypes.number,\\n\\n /** Validation error to display */\\n error: PropTypes.string\\n}\\n\\nPasswordInput.defaultProps = {\\n  maxLength: 50,\\n  showVisibilityToggle: false,\\n  label: 'Password'\\n}\\n\\nexport default PasswordInput\",\"examples\":[{\"name\":\"ExampleAllFeatures\",\"description\":\"All features enabled\",\"code\":\"import React, {Component} from 'react'\\nimport PasswordInput from 'ps-react/PasswordInput'\\n\\n/** All features enabled */\\nclass ExampleAllFeatures extends Component {\\n  constructor(props) {\\n    super(props)\\n    this.state = {\\n      password: ''\\n    }\\n  }\\n  getQuality() {\\n    const length = this.state.password.length\\n    return length > 10 ? 100 : length * 10\\n  }\\n  render() {\\n    return (\\n      <div>\\n        <PasswordInput\\n          htmlId=\\\"password-input-example-all-features\\\"\\n          name=\\\"password\\\"\\n          onChange={event => this.setState({password: event.target.value})}\\n          value={this.state.password}\\n          minLength={8}\\n          placeholder=\\\"Enter password\\\"\\n          showVisibilityToggle\\n          quality={this.getQuality()}\\n          {...this.props}\\n        />\\n      </div>\\n    )\\n  }\\n}\\n\\nexport default ExampleAllFeatures\"}]},{\"name\":\"ProgressBar\",\"description\":\"\",\"props\":{\"percent\":{\"type\":{\"name\":\"number\"},\"required\":true,\"description\":\"Percent of progress completed\"},\"width\":{\"type\":{\"name\":\"number\"},\"required\":true,\"description\":\"Bar width\"},\"height\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Bar height\",\"defaultValue\":{\"value\":\"5\",\"computed\":false}}},\"code\":\"import React, { Component } from 'react'\\nimport PropTypes from 'prop-types'\\n\\nclass ProgressBar extends Component {\\n  getColor = percent => {\\n    if (this.props.percent === 100) return 'green'\\n    return this.props.percent > 50 ? 'lightgreen' : 'red'\\n  }\\n  getWidthAsPercentOfTotalWidth = () => {\\n    return parseInt(this.props.width * (this.props.percent /100), 10)\\n  }\\n  render() {\\n    const { percent, width, height } = this.props\\n    return (\\n      <div style={{border: 'solid 1px lightgray', width: width}}>\\n        <div style={{\\n          width: this.getWidthAsPercentOfTotalWidth(),\\n          height,\\n          backgroundColor: this.getColor(percent)\\n        }} />\\n      </div>\\n    )\\n  }\\n}\\n\\nProgressBar.propTypes = {\\n  /** Percent of progress completed */\\n  percent: PropTypes.number.isRequired,\\n  /** Bar width */\\n  width: PropTypes.number.isRequired,\\n  /** Bar height */\\n  height: PropTypes.number\\n}\\n\\nProgressBar.defaultProps = {\\n  height: 5\\n}\\n\\nexport default ProgressBar\",\"examples\":[{\"name\":\"Example100Percent\",\"description\":\"100% progress and height 20px\",\"code\":\"import React from 'react'\\nimport ProgressBar from 'ps-react/ProgressBar'\\n\\n/** 100% progress and height 20px */\\nexport default function Example100Percent() {\\n  return <ProgressBar percent={100} width={150} height={20}/>\\n}\"},{\"name\":\"Example10Percent\",\"description\":\"10% progress\",\"code\":\"import React from 'react'\\nimport ProgressBar from 'ps-react/ProgressBar'\\n\\n/** 10% progress */\\nexport default function Example10Percent() {\\n  return <ProgressBar percent={10} width={150}/>\\n}\"},{\"name\":\"Example70Percent\",\"description\":\"70% progress\",\"code\":\"import React from 'react'\\nimport ProgressBar from 'ps-react/ProgressBar'\\n\\n/** 70% progress */\\nexport default function Example70Percent() {\\n  return <ProgressBar percent={70} width={150}/>\\n}\"}]},{\"name\":\"RegistrationForm\",\"description\":\"Registration form with built-in validation\",\"props\":{\"confirmationMessage\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Message displayed upon successful submission\",\"defaultValue\":{\"value\":\"\\\"Thanks for registering\\\"\",\"computed\":false}},\"onSubmit\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Called when form is submitted\"},\"minPasswordLength\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Minimum password length\",\"defaultValue\":{\"value\":\"8\",\"computed\":false}}},\"code\":\"import React, { Component } from 'react'\\nimport PropTypes from 'prop-types'\\nimport TextInput from '../TextInput'\\nimport PasswordInput from '../PasswordInput'\\n\\n/** Registration form with built-in validation */\\nclass RegistrationForm extends Component {\\n  constructor(props) {\\n    super(props)\\n    this.state = {\\n      user: {\\n        email: '',\\n        password: ''\\n      },\\n      errors: {},\\n      submitted: false\\n    }\\n  }\\n  onChange = event => {\\n    const {user} = this.state\\n    user[event.target.name] =event.target.value\\n    this.setState({user})\\n  }\\n  // Returns a number from 0 to 100 that represents password quality.\\n  // For simplicity, just returning % of min length entered.\\n  // Could enhance with checks for number, special char, unique characters, etc.\\n  passwordQuality(password) {\\n    if (!password) return null\\n    if (password.length >= this.props.minPasswordLength) return 100\\n    const percentOfMinLength = parseInt(password.length/this.props.minPasswordLength * 100, 10)\\n    return percentOfMinLength\\n  }\\n  validate({email, password}) {\\n    const errors = {}\\n    const {minPasswordLength} = this.props\\n    if (!email) errors.email = 'Email required'\\n    if (password.length < minPasswordLength) errors.password = `Password must be at least ${minPasswordLength} characters.`\\n    this.setState({errors})\\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\\n    return formIsValid\\n  }\\n  onSubmit = () => {\\n    const {user} = this.state\\n    const formIsValid = this.validate(user)\\n    if (formIsValid) {\\n      this.props.onSubmit(user)\\n      this.setState({submitted: true})\\n    }\\n  }\\n  render() {\\n    const {errors, submitted} = this.state\\n    const {email, password} = this.state.user\\n    return (\\n      submitted ?\\n      <h2>{this.props.confirmationMessage}</h2>:\\n      <div>\\n        <TextInput \\n          htmlId=\\\"registration-form-email\\\"\\n          name=\\\"email\\\"\\n          onChange={this.onChange}\\n          label=\\\"Email\\\"\\n          value={email}\\n          error={errors.email}\\n          required\\n        />\\n        <PasswordInput\\n          htmlId=\\\"registration-form-password\\\"\\n          name=\\\"password\\\"\\n          value={password}\\n          onChange={this.onChange}\\n          quality={this.passwordQuality(password)}\\n          showVisibilityToggle\\n          maxLength={50}\\n          error={errors.password}\\n        />\\n        <input type=\\\"submit\\\" value=\\\"Register\\\" onClick={this.onSubmit} />\\n      </div>\\n    )\\n  }\\n}\\n\\nRegistrationForm.propTypes = {\\n  /** Message displayed upon successful submission */\\n  confirmationMessage: PropTypes.string,\\n  /** Called when form is submitted */\\n  onSubmit: PropTypes.func.isRequired,\\n  /** Minimum password length */\\n  minPasswordLength: PropTypes.number\\n}\\n\\nRegistrationForm.defaultProps = {\\n  confirmationMessage: \\\"Thanks for registering\\\",\\n  minPasswordLength: 8\\n}\\n\\nexport default RegistrationForm\",\"examples\":[{\"name\":\"ExampleRegistrationForm\",\"description\":\"\",\"code\":\"import React, {Component} from 'react'\\nimport RegistrationForm from 'ps-react/RegistrationForm'\\n\\nexport default class ExampleRegistrationForm extends Component {\\n  onSubmit = user => {\\n    console.log(user)\\n  }\\n  render() {\\n    return <RegistrationForm onSubmit={this.onSubmit} />\\n  }\\n}\"}]},{\"name\":\"TextInput\",\"description\":\"Text input with integrated label to enfore consistency in layout, error display, label placement, and required field marker\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used.\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input label\"},\"type\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'text'\",\"computed\":false},{\"value\":\"'number'\",\"computed\":false},{\"value\":\"'password'\",\"computed\":false}]},\"required\":false,\"description\":\"Input type\",\"defaultValue\":{\"value\":\"\\\"text\\\"\",\"computed\":false}},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Mark label with asterisk if set to true\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function to call onChange\"},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder to display when empty\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Value\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"String to display when error occurs\"},\"children\":{\"type\":{\"name\":\"node\"},\"required\":false,\"description\":\"Child component to display next to the input\"}},\"code\":\"import React from 'react'\\nimport PropTypes from 'prop-types'\\nimport Label from '../Label'\\n\\n/** Text input with integrated label to enfore consistency in layout, error display, label placement, and required field marker */\\nfunction TextInput({htmlId, name, label, type=\\\"text\\\", required=false, onChange, placeholder, value, error, children, ...props}) {\\n  return (\\n    <div style={{marginBottom: 16}}>\\n      <Label htmlFor={htmlId} label={label} required={required} />\\n      <input\\n         id={htmlId}\\n         type={type}\\n         name={name}\\n         placeholder={placeholder}\\n         value={value}\\n         onChange={onChange}\\n         style={error && {border: 'solid 1px red'}}\\n         {...props}\\n      />\\n      {children}\\n      {error && <div className=\\\"error\\\" style={{color: 'red'}}>{error}</div>}\\n    </div>\\n  )\\n}\\n\\nTextInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing */\\n  htmlId: PropTypes.string.isRequired,\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n  /** Input type */\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n  /** Value */\\n  value: PropTypes.any,\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n}\\n\\nexport default TextInput\",\"examples\":[{\"name\":\"ExampleError\",\"description\":\"Required text box with error\",\"code\":\"import React, {Component} from 'react'\\nimport TextInput from 'ps-react/TextInput'\\n\\n/** Required text box with error */\\nexport default class ExampleError extends Component {\\n  render() {\\n    return (\\n      <TextInput\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        onChange={() => {}}\\n        required\\n        error=\\\"First name is required\\\"\\n      />\\n    )\\n  }\\n}\"},{\"name\":\"ExampleOptional\",\"description\":\"Optional Textbox\",\"code\":\"import React, {Component} from 'react'\\nimport TextInput from 'ps-react/TextInput'\\n\\n/** Optional Textbox */\\nexport default class ExampleOptional extends Component {\\n  render() {\\n    return (\\n      <TextInput\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        onChange={() => {}}\\n      />\\n    )\\n  }\\n}\"}]},{\"name\":\"TextInputBEM\",\"description\":\"Text input with integrated label to enfore consistency in layout, error display, label placement\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used.\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input label\"},\"type\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'text'\",\"computed\":false},{\"value\":\"'number'\",\"computed\":false},{\"value\":\"'password'\",\"computed\":false}]},\"required\":false,\"description\":\"Input type\",\"defaultValue\":{\"value\":\"\\\"text\\\"\",\"computed\":false}},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Mark label with asterisk if set to true\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function to call onChange\"},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder to display when empty\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Value\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"String to display when error occurs\"},\"children\":{\"type\":{\"name\":\"node\"},\"required\":false,\"description\":\"Child component to display next to the input\"}},\"code\":\"import React from 'react'\\nimport PropTypes from 'prop-types'\\nimport Label from '../Label'\\n\\n/** Text input with integrated label to enfore consistency in layout, error display, label placement */\\nfunction TextInput({htmlId, name, label, type=\\\"text\\\", required=false, onChange, placeholder, value, error, children, ...props}) {\\n  return (\\n    <div className=\\\"textinput\\\">\\n      <Label htmlFor={htmlId} label={label} required={required} />\\n      <input\\n         id={htmlId}\\n         type={type}\\n         name={name}\\n         placeholder={placeholder}\\n         value={value}\\n         onChange={onChange}\\n         className={error && 'textinput__input--state-error'}\\n         {...props}\\n      />\\n      {children}\\n      {error && <div className=\\\"textinput__error\\\">{error}</div>}\\n    </div>\\n  )\\n}\\n\\nTextInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing */\\n  htmlId: PropTypes.string.isRequired,\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n  /** Input type */\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n  /** Value */\\n  value: PropTypes.any,\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n}\\n\\nexport default TextInput\",\"examples\":[{\"name\":\"ExampleError\",\"description\":\"Required text box with error\",\"code\":\"import React, {Component} from 'react'\\nimport TextInputBEM from 'ps-react/TextInputBEM'\\n\\n/** Required text box with error */\\nexport default class ExampleError extends Component {\\n  render() {\\n    return (\\n      <TextInputBEM\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        onChange={() => {}}\\n        required\\n        error=\\\"First name is required\\\"\\n      />\\n    )\\n  }\\n}\"}]},{\"name\":\"TextInputCSSModules\",\"description\":\"Text input with integrated label to enfore consistency in layout, error display, label placement\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used.\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input label\"},\"type\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'text'\",\"computed\":false},{\"value\":\"'number'\",\"computed\":false},{\"value\":\"'password'\",\"computed\":false}]},\"required\":false,\"description\":\"Input type\",\"defaultValue\":{\"value\":\"\\\"text\\\"\",\"computed\":false}},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Mark label with asterisk if set to true\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function to call onChange\"},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder to display when empty\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Value\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"String to display when error occurs\"},\"children\":{\"type\":{\"name\":\"node\"},\"required\":false,\"description\":\"Child component to display next to the input\"}},\"code\":\"import React from 'react'\\nimport PropTypes from 'prop-types'\\nimport Label from '../Label'\\nimport styles from './textInput.module.css'\\n\\n/** Text input with integrated label to enfore consistency in layout, error display, label placement */\\nfunction TextInput({htmlId, name, label, type=\\\"text\\\", required=false, onChange, placeholder, value, error, children, ...props}) {\\n  return (\\n    <div className={styles.fieldset}>\\n      <Label htmlFor={htmlId} label={label} required={required} />\\n      <input\\n         id={htmlId}\\n         type={type}\\n         name={name}\\n         placeholder={placeholder}\\n         value={value}\\n         onChange={onChange}\\n         className={error && styles.inputError}\\n         {...props}\\n      />\\n      {children}\\n      {error && <div className={styles.error}>{error}</div>}\\n    </div>\\n  )\\n}\\n\\nTextInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing */\\n  htmlId: PropTypes.string.isRequired,\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n  /** Input type */\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n  /** Value */\\n  value: PropTypes.any,\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n}\\n\\nexport default TextInput\",\"examples\":[{\"name\":\"ExampleError\",\"description\":\"Required text box with error\",\"code\":\"import React, {Component} from 'react'\\nimport TextInputCSSModules from 'ps-react/TextInputCSSModules'\\n\\n/** Required text box with error */\\nexport default class ExampleError extends Component {\\n  render() {\\n    return (\\n      <TextInputCSSModules\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        onChange={() => {}}\\n        required\\n        error=\\\"First name is required\\\"\\n      />\\n    )\\n  }\\n}\"}]},{\"name\":\"TextInputStyledComponents\",\"description\":\"Text input with integrated label to enfore consistency in layout, error display, label placement\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used.\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input label\"},\"type\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'text'\",\"computed\":false},{\"value\":\"'number'\",\"computed\":false},{\"value\":\"'password'\",\"computed\":false}]},\"required\":false,\"description\":\"Input type\",\"defaultValue\":{\"value\":\"\\\"text\\\"\",\"computed\":false}},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Mark label with asterisk if set to true\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function to call onChange\"},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder to display when empty\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Value\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"String to display when error occurs\"},\"children\":{\"type\":{\"name\":\"node\"},\"required\":false,\"description\":\"Child component to display next to the input\"}},\"code\":\"import React from 'react'\\nimport PropTypes from 'prop-types'\\nimport Label from '../Label'\\nimport styled from 'styled-components'\\n\\n/** Text input with integrated label to enfore consistency in layout, error display, label placement */\\nfunction TextInput({htmlId, name, label, type=\\\"text\\\", required=false, onChange, placeholder, value, error, children, ...props}) {\\n  const Error = styled.div`\\n    color: red;\\n  `\\n  const Input = styled.input`\\n    border: ${error && 'solid 1px red'};\\n    display: block;\\n  `;\\n  const Fieldset = styled.div`\\n    margin-bottom: 16px;\\n  `;\\n  return (\\n    <Fieldset>\\n      <Label htmlFor={htmlId} label={label} required={required} />\\n      <Input\\n         id={htmlId}\\n         type={type}\\n         name={name}\\n         placeholder={placeholder}\\n         value={value}\\n         onChange={onChange}\\n         {...props}\\n      />\\n      {children}\\n      {error && <Error>{error}</Error>}\\n    </Fieldset>\\n  )\\n}\\n\\nTextInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing */\\n  htmlId: PropTypes.string.isRequired,\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n  /** Input type */\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n  /** Value */\\n  value: PropTypes.any,\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n}\\n\\nexport default TextInput\",\"examples\":[{\"name\":\"ExampleError\",\"description\":\"Required text box with error\",\"code\":\"import React, {Component} from 'react'\\nimport TextInputStyledComponent from 'ps-react/TextInputStyledComponents'\\n\\n/** Required text box with error */\\nexport default class ExampleError extends Component {\\n  render() {\\n    return (\\n      <TextInputStyledComponent\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        onChange={() => {}}\\n        required\\n        error=\\\"First name is required\\\"\\n      />\\n    )\\n  }\\n}\"}]}]","import React from 'react'\nimport EyeIcon from 'ps-react/EyeIcon'\n\nexport default function EyeIconExample() {\n  return <EyeIcon />\n}","import React from 'react'\nimport Label from 'ps-react/Label'\n\n/** Optional label */\nexport default function ExampleOptional() {\n  return <Label htmlFor=\"test\" label=\"test\" />\n}","import React from 'react'\nimport Label from 'ps-react/Label'\n\n/** Required label */\nexport default function ExampleRequired() {\n  return <Label htmlFor=\"test\" label=\"test\" required />\n}","var map = {\n\t\"./EyeIcon/Example\": 23,\n\t\"./EyeIcon/Example.js\": 23,\n\t\"./HelloWorld/ExampleHelloWorld\": 32,\n\t\"./HelloWorld/ExampleHelloWorld.js\": 32,\n\t\"./Label/ExampleOptional\": 24,\n\t\"./Label/ExampleOptional.js\": 24,\n\t\"./Label/ExampleRequired\": 25,\n\t\"./Label/ExampleRequired.js\": 25,\n\t\"./PasswordInput/ExampleAllFeatures\": 26,\n\t\"./PasswordInput/ExampleAllFeatures.js\": 26,\n\t\"./ProgressBar/Example100Percent\": 27,\n\t\"./ProgressBar/Example100Percent.js\": 27,\n\t\"./ProgressBar/Example10Percent\": 28,\n\t\"./ProgressBar/Example10Percent.js\": 28,\n\t\"./ProgressBar/Example70Percent\": 29,\n\t\"./ProgressBar/Example70Percent.js\": 29,\n\t\"./RegistrationForm/ExampleRegistrationForm\": 33,\n\t\"./RegistrationForm/ExampleRegistrationForm.js\": 33,\n\t\"./TextInput/ExampleError\": 30,\n\t\"./TextInput/ExampleError.js\": 30,\n\t\"./TextInput/ExampleOptional\": 31,\n\t\"./TextInput/ExampleOptional.js\": 31,\n\t\"./TextInputBEM/ExampleError\": 34,\n\t\"./TextInputBEM/ExampleError.js\": 34,\n\t\"./TextInputCSSModules/ExampleError\": 35,\n\t\"./TextInputCSSModules/ExampleError.js\": 35,\n\t\"./TextInputStyledComponents/ExampleError\": 36,\n\t\"./TextInputStyledComponents/ExampleError.js\": 36\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 254;","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Navigation = ({components}) => {\n  return (\n    <ul className=\"navigation\">\n      {\n        components.map(name => {\n          return (\n            <li key={name}>\n              {/* By convention, the name of the component will be what's used in the URL */}\n              <a href={`#${name}`}>{name}</a>\n            </li>\n          )\n        })\n      }\n    </ul>\n  )\n}\n\nNavigation.propTypes = {\n  components: PropTypes.array.isRequired\n}\n\nexport default Navigation","import React from 'react';\nimport PropTypes from 'prop-types';\nimport hljs from 'highlight.js'\nimport javascript from 'highlight.js/lib/languages/javascript'\n\n// This way is easy, but adds 170K gzipped to bundle since all langs are included.\n// import Highlight from 'react-highlight';\n\nclass CodeExample extends React.Component {\n  // constructor(props) {\n  //   super(props)\n  //   this.nodeRef = React.createRef()\n  // }\n  componentDidMount() {\n    hljs.registerLanguage('javascript', javascript);\n    hljs.highlightBlock(this.element);\n  }\n  \n  render() {\n    return (\n      <pre ref={ref => {this.element = ref}}>\n        <code>\n          {this.props.children}\n        </code>\n      </pre>\n    )\n  }\n}\n\nCodeExample.propTypes = {\n  children: PropTypes.string.isRequired\n}\n\nexport default CodeExample;\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport CodeExample from './CodeExample'\n\nclass Example extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { showCode: false }\n  }\n  toggleCode = event => {\n    event.preventDefault()\n    this.setState(prevState => {\n      return {showCode: !prevState.showCode}\n    })\n  }\n  render() {\n    const {showCode} = this.state\n    const {code, description, name} = this.props.example\n    // Must use CommonJS require to dynamically require because ES Modules must be statically analyzable\n    console.log('component name is ', this.props.componentName)\n    console.log('file name is ', name)\n    const ExampleComponent = require(`./examples/${this.props.componentName}/${name}`).default\n    console.log('example component is ', ExampleComponent)\n    return (\n      <div className=\"example\">\n        {description && <h4>{description}</h4>}\n        <ExampleComponent />\n        <p>\n          <a href=\"#\" onClick={this.toggleCode}>\n            {showCode ? \"Hide\" : \"Show\"} Code\n          </a>\n        </p>\n        {showCode && <CodeExample>{code}</CodeExample>}\n      </div>\n    )\n  }\n}\n\nExample.propTypes = {\n  example: PropTypes.object.isRequired,\n  componentName: PropTypes.string.isRequired\n}\n\nexport default Example","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Props = ({props}) => {\n  return (\n    <table className=\"props\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Description</th>\n          <th>Type</th>\n          <th>Default</th>\n          <th>Required</th>\n        </tr>\n      </thead>\n      <tbody>\n        {Object.keys(props).map(key => {\n          return (\n            <tr key={key}>\n              <td>{key}</td>\n              <td>{props[key].description}</td>\n              <td>{props[key].type.name}</td>\n              <td>{props[key].defaultValue && props[key].defaultValue.value}</td>\n              <td>{props[key].required && \"X\"}</td>\n            </tr>\n          )\n        })}\n      </tbody>\n    </table>\n  )\n}\n\nProps.propTypes = {\n  props: PropTypes.object.isRequired\n}\n\nexport default Props","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Example from './Example'\nimport Props from './Props'\n\nconst ComponentPage = ({ component }) => {\n  const { name, description, props, examples } = component\n  console.log('component is ', component)\n  return (\n    <div className=\"componentpage\">\n      <h2>{name}</h2>\n      <p>{description}</p>\n      <h3>Example</h3>\n      {examples.length > 0 ?\n      examples.map(example =>\n      <Example key={example.code}\n        example={example}\n        componentName={name} />\n      )\n      : \"No examples exist.\"\n      }\n      <h3>Props</h3>\n      {props\n      ? <Props props={props} />\n      : \"This component accepts no props\"\n      }\n    </div>\n  )\n}\n\nComponentPage.propTypes = {\n  component: PropTypes.object.isRequired\n}\n\nexport default ComponentPage","import React, { Component } from 'react'\nimport Navigation from './Navigation'\nimport ComponentPage from './ComponentPage'\nimport componentData from '../../config/componentData'\n\nexport default class Docs extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      route: window.location.hash.substr(1)\n    }\n  }\n  componentDidMount() {\n    window.addEventListener('hashchange', () => {\n      this.setState({\n        route: window.location.hash.substr(1)\n      })\n    })\n  }\n  render() {\n    const { route } = this.state\n    // By convention, the route and the URL should match the components name. If there are no route specified, just display the first component.\n    const component = route ? componentData.filter(component => component.name === route)[0] : componentData[0]\n    return (\n      <div>\n        <Navigation components={componentData.map(component => component.name)} />\n        <ComponentPage component={component} />\n      </div>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Doc from './docs/Docs';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/highlight.js/styles/ocean.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Doc />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, {Component} from 'react'\nimport PasswordInput from 'ps-react/PasswordInput'\n\n/** All features enabled */\nclass ExampleAllFeatures extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      password: ''\n    }\n  }\n  getQuality() {\n    const length = this.state.password.length\n    return length > 10 ? 100 : length * 10\n  }\n  render() {\n    return (\n      <div>\n        <PasswordInput\n          htmlId=\"password-input-example-all-features\"\n          name=\"password\"\n          onChange={event => this.setState({password: event.target.value})}\n          value={this.state.password}\n          minLength={8}\n          placeholder=\"Enter password\"\n          showVisibilityToggle\n          quality={this.getQuality()}\n          {...this.props}\n        />\n      </div>\n    )\n  }\n}\n\nexport default ExampleAllFeatures","import React from 'react'\nimport ProgressBar from 'ps-react/ProgressBar'\n\n/** 100% progress and height 20px */\nexport default function Example100Percent() {\n  return <ProgressBar percent={100} width={150} height={20}/>\n}","import React from 'react'\nimport ProgressBar from 'ps-react/ProgressBar'\n\n/** 10% progress */\nexport default function Example10Percent() {\n  return <ProgressBar percent={10} width={150}/>\n}","import React from 'react'\nimport ProgressBar from 'ps-react/ProgressBar'\n\n/** 70% progress */\nexport default function Example70Percent() {\n  return <ProgressBar percent={70} width={150}/>\n}","import React, {Component} from 'react'\nimport TextInput from 'ps-react/TextInput'\n\n/** Required text box with error */\nexport default class ExampleError extends Component {\n  render() {\n    return (\n      <TextInput\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n        required\n        error=\"First name is required\"\n      />\n    )\n  }\n}","import React, {Component} from 'react'\nimport TextInput from 'ps-react/TextInput'\n\n/** Optional Textbox */\nexport default class ExampleOptional extends Component {\n  render() {\n    return (\n      <TextInput\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n      />\n    )\n  }\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n/** A super lame component that says Hello with a custom message */\nfunction HelloWorld({message}) {\n  return <div>Hello {message}</div>\n}\n\nHelloWorld.propTypes = {\n  /** Message to display */\n  message: PropTypes.string\n}\n\nHelloWorld.defaultProps = {\n  message: 'World'\n}\n\nexport default HelloWorld","import React from 'react'\nimport HelloWorld from 'ps-react/HelloWorld'\n\n/** Custom message */\nexport default function ExampleHelloWorld() {\n  return <HelloWorld message=\"Otto\" />\n}","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport TextInput from '../TextInput'\nimport PasswordInput from '../PasswordInput'\n\n/** Registration form with built-in validation */\nclass RegistrationForm extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      user: {\n        email: '',\n        password: ''\n      },\n      errors: {},\n      submitted: false\n    }\n  }\n  onChange = event => {\n    const {user} = this.state\n    user[event.target.name] =event.target.value\n    this.setState({user})\n  }\n  // Returns a number from 0 to 100 that represents password quality.\n  // For simplicity, just returning % of min length entered.\n  // Could enhance with checks for number, special char, unique characters, etc.\n  passwordQuality(password) {\n    if (!password) return null\n    if (password.length >= this.props.minPasswordLength) return 100\n    const percentOfMinLength = parseInt(password.length/this.props.minPasswordLength * 100, 10)\n    return percentOfMinLength\n  }\n  validate({email, password}) {\n    const errors = {}\n    const {minPasswordLength} = this.props\n    if (!email) errors.email = 'Email required'\n    if (password.length < minPasswordLength) errors.password = `Password must be at least ${minPasswordLength} characters.`\n    this.setState({errors})\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\n    return formIsValid\n  }\n  onSubmit = () => {\n    const {user} = this.state\n    const formIsValid = this.validate(user)\n    if (formIsValid) {\n      this.props.onSubmit(user)\n      this.setState({submitted: true})\n    }\n  }\n  render() {\n    const {errors, submitted} = this.state\n    const {email, password} = this.state.user\n    return (\n      submitted ?\n      <h2>{this.props.confirmationMessage}</h2>:\n      <div>\n        <TextInput \n          htmlId=\"registration-form-email\"\n          name=\"email\"\n          onChange={this.onChange}\n          label=\"Email\"\n          value={email}\n          error={errors.email}\n          required\n        />\n        <PasswordInput\n          htmlId=\"registration-form-password\"\n          name=\"password\"\n          value={password}\n          onChange={this.onChange}\n          quality={this.passwordQuality(password)}\n          showVisibilityToggle\n          maxLength={50}\n          error={errors.password}\n        />\n        <input type=\"submit\" value=\"Register\" onClick={this.onSubmit} />\n      </div>\n    )\n  }\n}\n\nRegistrationForm.propTypes = {\n  /** Message displayed upon successful submission */\n  confirmationMessage: PropTypes.string,\n  /** Called when form is submitted */\n  onSubmit: PropTypes.func.isRequired,\n  /** Minimum password length */\n  minPasswordLength: PropTypes.number\n}\n\nRegistrationForm.defaultProps = {\n  confirmationMessage: \"Thanks for registering\",\n  minPasswordLength: 8\n}\n\nexport default RegistrationForm","import React, {Component} from 'react'\nimport RegistrationForm from 'ps-react/RegistrationForm'\n\nexport default class ExampleRegistrationForm extends Component {\n  onSubmit = user => {\n    console.log(user)\n  }\n  render() {\n    return <RegistrationForm onSubmit={this.onSubmit} />\n  }\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Label from '../Label'\n\n/** Text input with integrated label to enfore consistency in layout, error display, label placement */\nfunction TextInput({htmlId, name, label, type=\"text\", required=false, onChange, placeholder, value, error, children, ...props}) {\n  return (\n    <div className=\"textinput\">\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <input\n         id={htmlId}\n         type={type}\n         name={name}\n         placeholder={placeholder}\n         value={value}\n         onChange={onChange}\n         className={error && 'textinput__input--state-error'}\n         {...props}\n      />\n      {children}\n      {error && <div className=\"textinput__error\">{error}</div>}\n    </div>\n  )\n}\n\nTextInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing */\n  htmlId: PropTypes.string.isRequired,\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n  /** Input label */\n  label: PropTypes.string.isRequired,\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n  /** Value */\n  value: PropTypes.any,\n  /** String to display when error occurs */\n  error: PropTypes.string,\n  /** Child component to display next to the input */\n  children: PropTypes.node\n}\n\nexport default TextInput","import React, {Component} from 'react'\nimport TextInputBEM from 'ps-react/TextInputBEM'\n\n/** Required text box with error */\nexport default class ExampleError extends Component {\n  render() {\n    return (\n      <TextInputBEM\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n        required\n        error=\"First name is required\"\n      />\n    )\n  }\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Label from '../Label'\nimport styles from './textInput.module.css'\n\n/** Text input with integrated label to enfore consistency in layout, error display, label placement */\nfunction TextInput({htmlId, name, label, type=\"text\", required=false, onChange, placeholder, value, error, children, ...props}) {\n  return (\n    <div className={styles.fieldset}>\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <input\n         id={htmlId}\n         type={type}\n         name={name}\n         placeholder={placeholder}\n         value={value}\n         onChange={onChange}\n         className={error && styles.inputError}\n         {...props}\n      />\n      {children}\n      {error && <div className={styles.error}>{error}</div>}\n    </div>\n  )\n}\n\nTextInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing */\n  htmlId: PropTypes.string.isRequired,\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n  /** Input label */\n  label: PropTypes.string.isRequired,\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n  /** Value */\n  value: PropTypes.any,\n  /** String to display when error occurs */\n  error: PropTypes.string,\n  /** Child component to display next to the input */\n  children: PropTypes.node\n}\n\nexport default TextInput","import React, {Component} from 'react'\nimport TextInputCSSModules from 'ps-react/TextInputCSSModules'\n\n/** Required text box with error */\nexport default class ExampleError extends Component {\n  render() {\n    return (\n      <TextInputCSSModules\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n        required\n        error=\"First name is required\"\n      />\n    )\n  }\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Label from '../Label'\nimport styled from 'styled-components'\n\n/** Text input with integrated label to enfore consistency in layout, error display, label placement */\nfunction TextInput({htmlId, name, label, type=\"text\", required=false, onChange, placeholder, value, error, children, ...props}) {\n  const Error = styled.div`\n    color: red;\n  `\n  const Input = styled.input`\n    border: ${error && 'solid 1px red'};\n    display: block;\n  `;\n  const Fieldset = styled.div`\n    margin-bottom: 16px;\n  `;\n  return (\n    <Fieldset>\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <Input\n         id={htmlId}\n         type={type}\n         name={name}\n         placeholder={placeholder}\n         value={value}\n         onChange={onChange}\n         {...props}\n      />\n      {children}\n      {error && <Error>{error}</Error>}\n    </Fieldset>\n  )\n}\n\nTextInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing */\n  htmlId: PropTypes.string.isRequired,\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n  /** Input label */\n  label: PropTypes.string.isRequired,\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n  /** Value */\n  value: PropTypes.any,\n  /** String to display when error occurs */\n  error: PropTypes.string,\n  /** Child component to display next to the input */\n  children: PropTypes.node\n}\n\nexport default TextInput","import React, {Component} from 'react'\nimport TextInputStyledComponent from 'ps-react/TextInputStyledComponents'\n\n/** Required text box with error */\nexport default class ExampleError extends Component {\n  render() {\n    return (\n      <TextInputStyledComponent\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n        required\n        error=\"First name is required\"\n      />\n    )\n  }\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n/** Label with required field display, htmlFor, and block styling */\nfunction Label({htmlFor, label, required}) {\n  return (\n    <label style={{display: 'block'}} htmlFor={htmlFor}>\n      {label} {required &&\n        <span style={{color: 'red'}}>\n          *\n        </span>}\n    </label>\n  )\n}\n\nLabel.propTypes = {\n  /** HTML ID for associated input */\n  htmlFor: PropTypes.string.isRequired,\n  /** Label text */\n  label: PropTypes.string.isRequired,\n  /** Display asterisk after label if true */\n  required: PropTypes.bool\n}\n\nexport default Label","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nclass ProgressBar extends Component {\n  getColor = percent => {\n    if (this.props.percent === 100) return 'green'\n    return this.props.percent > 50 ? 'lightgreen' : 'red'\n  }\n  getWidthAsPercentOfTotalWidth = () => {\n    return parseInt(this.props.width * (this.props.percent /100), 10)\n  }\n  render() {\n    const { percent, width, height } = this.props\n    return (\n      <div style={{border: 'solid 1px lightgray', width: width}}>\n        <div style={{\n          width: this.getWidthAsPercentOfTotalWidth(),\n          height,\n          backgroundColor: this.getColor(percent)\n        }} />\n      </div>\n    )\n  }\n}\n\nProgressBar.propTypes = {\n  /** Percent of progress completed */\n  percent: PropTypes.number.isRequired,\n  /** Bar width */\n  width: PropTypes.number.isRequired,\n  /** Bar height */\n  height: PropTypes.number\n}\n\nProgressBar.defaultProps = {\n  height: 5\n}\n\nexport default ProgressBar","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Label from '../Label'\n\n/** Text input with integrated label to enfore consistency in layout, error display, label placement, and required field marker */\nfunction TextInput({htmlId, name, label, type=\"text\", required=false, onChange, placeholder, value, error, children, ...props}) {\n  return (\n    <div style={{marginBottom: 16}}>\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <input\n         id={htmlId}\n         type={type}\n         name={name}\n         placeholder={placeholder}\n         value={value}\n         onChange={onChange}\n         style={error && {border: 'solid 1px red'}}\n         {...props}\n      />\n      {children}\n      {error && <div className=\"error\" style={{color: 'red'}}>{error}</div>}\n    </div>\n  )\n}\n\nTextInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing */\n  htmlId: PropTypes.string.isRequired,\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n  /** Input label */\n  label: PropTypes.string.isRequired,\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n  /** Value */\n  value: PropTypes.any,\n  /** String to display when error occurs */\n  error: PropTypes.string,\n  /** Child component to display next to the input */\n  children: PropTypes.node\n}\n\nexport default TextInput"],"sourceRoot":""}